AWSTemplateFormatVersion: 2010-09-09
Description: 'API Gateway, Lambda, IoT Rule and DynamoDB'

Parameters:
  ProjectPrefix:
    Type: String
    Default: 'demo'
    Description: 'Name of Project prefix'
  ProjectName:
    Type: String
    Default: 'iot-backend'
    Description: 'Name of Project'
  ProjectRepo:
    Type: 'String'
    Default: 'TomNuttall/iot-temp-sensor'
    Description: 'Repo Path i.e GitHubUser/RepoName'
  SubDomainName:
    Type: 'String'
    Description: 'Subdomain path'
  HostedZoneId:
    Type: 'String'
    Description: 'Domain hosted id'

Resources:
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectPrefix}-db-${ProjectName}'
      AttributeDefinitions:
        - AttributeName: 'date'
          AttributeType: 'S'
        - AttributeName: 'time'
          AttributeType: 'N'
      KeySchema:
        - AttributeName: 'date'
          KeyType: 'HASH'
        - AttributeName: 'time'
          KeyType: 'RANGE'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  IotTopicRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: 'demotemp'
      TopicRulePayload:
        Description: !Sub '${ProjectPrefix}-topicrule-${ProjectName}'
        RuleDisabled: false
        AwsIotSqlVersion: '2016-03-23'
        Sql: SELECT date, time, temp FROM 'demotemp/pub'
        Actions:
          - DynamoDBv2:
              PutItem:
                TableName: !Sub '${ProjectPrefix}-db-${ProjectName}'
              RoleArn: !GetAtt IoTRole.Arn

    DependsOn:
      - IoTRole

  IoTRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-iot'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'iot.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-db'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'dynamodb:PutItem'
                Resource: !GetAtt DynamoDBTable.Arn
    DependsOn:
      - DynamoDBTable

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectPrefix}-lambda-${ProjectName}'
      RetentionInDays: 14

  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: !Sub '${ProjectPrefix}-lambda-${ProjectName}'
      FunctionName: !Sub '${ProjectPrefix}-lambda-${ProjectName}'
      Code:
        ZipFile: |
          exports.handler = function(event, context, callback) {
            const response = {
              statusCode: 200,
              body: JSON.stringify({ 'msg': 'dummy api response' })
            };
            callback(null, response);
          };
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
    DependsOn:
      - LambdaRole

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-lambda'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-lambda'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'dynamodb:Query'
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: 'Allow'
                Action: logs:*
                Resource: !GetAtt LambdaLogGroup.Arn
    DependsOn:
      - LambdaLogGroup
      - DynamoDBTable

  Api:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub '${ProjectPrefix}-api-${ProjectName}'
      ProtocolType: 'HTTP'
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET

  ApiCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref SubDomainName
      DomainValidationOptions:
        - DomainName: !Ref SubDomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  ApiDomain:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Properties:
      DomainName: !Ref SubDomainName
      DomainNameConfigurations:
        - EndpointType: 'REGIONAL'
          CertificateArn: !Ref ApiCertificate
    DependsOn:
      - ApiCertificate

  ApiMapping:
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref SubDomainName
      Stage: !Ref ApiStage
    DependsOn:
      - Api
      - ApiDomain
      - ApiStage

  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref SubDomainName
      Type: 'A'
      AliasTarget:
        DNSName: !GetAtt ApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomain.RegionalHostedZoneId
    DependsOn:
      - Api

  ApiIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt Lambda.Arn
          - /invocations
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
    DependsOn:
      - Lambda
      - Api

  ApiRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref Api
      RouteKey: 'GET /'
      Target: !Sub 'integrations/${ApiIntegration}'
    DependsOn:
      - Api
      - ApiIntegration

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/'
    DependsOn:
      - ApiRoute

  ApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref Api
      AutoDeploy: true
      StageName: 'dev'
    DependsOn:
      - Api

  GitHubActionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-github-lambda'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: 'sts.amazonaws.com'
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub 'repo:${ProjectRepo}:*'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-github-lambda'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:UpdateFunctionCode'
                Resource: !GetAtt Lambda.Arn
    DependsOn:
      - Lambda
